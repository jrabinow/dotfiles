# References
# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
#
# Example files
# https://github.com/stribika/duraconf/blob/master/configs/gnupg/gpg.conf
# https://raw.githubusercontent.com/jonathancross/jc-docs/master/pgp/gpg.conf

# Tries to use the GnuPG-Agent. With this option, GnuPG first tries to connect to
# the agent before it asks for a passphrase.
use-agent

#-----------------------------
# default key
#-----------------------------
# The default key to sign with. If this option is not used, the default key is
# the first key found in the secret keyring
default-key 0x249B8CA1AD6A0E88


#-----------------------------
# algorithms and ciphers
#-----------------------------

# Enable UTF-8 support (for cross platform usage).
# If you do not use the Latin-1 (ISO-8859-1) charset, you should tell
# GnuPG which is the native character set.  Please check the man page
# for supported character sets.  This character set is only used for
# metadata and not for the actual message which does not undergo any
# translation.  Note that future version of GnuPG will change to UTF-8
# as default character set.
charset utf-8
# Fixed list - use unixtimestamps for all timestamps and do not merge id/key.
fixed-list-mode
# Disable comment string in clear text signatures and ASCII armored messages
no-comments
# Disable comment string in clear text signatures and ASCII armored messages
no-emit-version

# This preference list is used for new keys and becomes the default for
# "setpref" in the edit menu
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed

# message digest algorithm used when signing a key. Force our digest creation to SHA512.
cert-digest-algo SHA512
s2k-digest-algo SHA512
# Force our cipher to AES256
s2k-cipher-algo AES256

# list of personal digest preferences. When multiple digests are supported by
# all recipients, choose the strongest one
personal-cipher-preferences AES256 TWOFISH AES192 BLOWFISH AES CAST5

# list of personal digest preferences. When multiple ciphers are supported by
# all recipients, choose the strongest one
personal-digest-preferences SHA512 SHA384 SHA256 SHA224

personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
bzip2-compress-level 9
compress-level 9

ignore-time-conflict
allow-freeform-uid
weak-digest SHA1


#-----------------------------
# behavior
#-----------------------------

# Require displaying long hexidecimal keys.
keyid-format 0xlong
# List fingerprints with keys.
with-subkey-fingerprint
with-fingerprint
with-keygrip

# Show policy url notation
list-options show-policy-url show-user-notations show-sig-expire

# Display the calculated validity of user IDs during key listings
list-options show-uid-validity
verify-options show-uid-validity

# Ensure cross certification on subkey is present and valid.
# When verifying a signature made from a subkey, ensure that the cross
# certification "back signature" on the subkey is present and valid.
# This protects against a subtle attack against subkeys that can sign.
# Defaults to --no-require-cross-certification.  However for new
# installations it should be enabled.
require-cross-certification

#-----------------------------
# keyserver
#-----------------------------


# This is the server that --recv-keys, --send-keys, and --search-keys will
# communicate with to receive keys from, send keys to, and search for keys on
# Keyservers are tried in the order they are specified
# Also see https://unix.stackexchange.com/a/656210
# https://wiki.archlinux.org/title/OpenPGP#Web_Key_Directory
keyserver hkps://keys.openpgp.org
keyserver hkps://pgpkeys.eu
keyserver hkps://keyserver.ubuntu.com
#keyserver hkps://pgp.mit.edu
#keyserver hkps://keys.mailvelope.com

# This option enables the automatic retrieving of keys from a keyserver when
# verifying signatures made by keys that are not on the local keyring
keyserver-options auto-key-retrieve

# GnuPG can automatically locate and retrieve keys as needed using this option.
# This happens when encrypting to an email address (in the "user@example.com"
# form), and there are no "user@example.com" keys on the local keyring.
auto-key-locate keyserver hkps://keys.openpgp.org

# Provide a certificate store to override the system default
# Get this from https://sks-keyservers.net/sks-keyservers.netCA.pem
# Leaving this option here but it seems like bad practices unless you're regularly checking
# and downloading updated bundles, in case some certs leak and get revoked
#keyserver-options ca-cert-file=/usr/local/etc/ssl/certs/hkps.pool.sks-keyservers.net.pem

# Set the proxy to use for HTTP and HKP keyservers - default to the standard
# local Tor socks proxy
# It is encouraged to use Tor for improved anonymity. Preferrably use either a
# dedicated SOCKSPort for GnuPG and/or enable IsolateDestPort and
# IsolateDestAddr
#keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050

# Don't leak DNS, see https://trac.torproject.org/projects/tor/ticket/2846
# The bug has been fixed but leaving this commented out here for posterity
#keyserver-options no-try-dns-srv

# When using --refresh-keys, if the key in question has a preferred keyserver
# URL, then disable use of that preferred keyserver to refresh the key from
keyserver-options no-honor-keyserver-url

# When searching for a key with --search-keys, include keys that are marked on
# the keyserver as revoked
keyserver-options include-revoked
