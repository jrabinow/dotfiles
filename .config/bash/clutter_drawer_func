#!/usr/bin/env bash

alias dadjoke="curl https://icanhazdadjoke.com --silent; echo"

# Shorthand clone from github
function hclone()
{
    local url
    if [[ $1 == "-p" ]]; then
        url="git@github.com:${2}.git"
        shift
    else
        url="git://github.com/${1}.git"
    fi
    git clone "$url"
}

# https://github.com/vrothberg/vgrep#fzf
# https://github.com/vrothberg/vgrep/issues/177#issuecomment-1862560928
function cgvg()
{
    query="$*"
    # shellcheck disable=SC2086
    vgrep --no-header ${query} \
        | fzf --bind "enter:execute:vim {2} +{3}" --ansi --tac
}

function weather()
{
    location="${*}"
    curl "v2.wttr.in/${location// /%20}?m"
}

function geoip()
{
    ipaddr="$1"
    shift
    curl -s "http://ip-api.com/${ipaddr}"
    curl -s "https://ipinfo.io/${ipaddr}"
}

function ip2asn()
{
    ipaddr="${1}"
    shift
    curl -s "https://api.hackertarget.com/aslookup/?q=${ipaddr}&output=json" | jq
}

function archive_dl_music()
{
    mv -iv ~/Downloads/*.mp3 ~/Music/Songs/
}

function isblocked()
{
    grep "${1}" /etc/hosts
}

function twlookup()
{
    phone_number="$1"
    shift
    curl -sX GET "https://lookups.twilio.com/v1/PhoneNumbers/${phone_number}?CountryCode=US&Type=carrier&Type=caller-name&Fields=line_type_intelligence" \
        -u "${TWILIO_TOKEN}" | jq
}

function twlookup_whitepages()
{
    phone_number="$1"
    shift
    curl -sX GET "https://lookups.twilio.com/v1/PhoneNumbers/${phone_number}?AddOns=whitepages_pro_caller_id" \
        -u "${TWILIO_TOKEN}" | jq
}

function pgkill()
{
    pattern="$1"
    shift
    pgrep -alfi "${pattern}" | fzf | awk '{print $1}' | xargs -r kill
}

function pgkillall()
{
    pattern="$1"
    shift
    pgrep -alfi "${pattern}" | awk '{print $1}' | xargs -r kill
}

function wikisole()
{
    dig +short txt "$*.wp.dg.cx"
}

function worddef()
{
    local word
    word="${*}"
    curl -s "https://api.dictionaryapi.dev/api/v2/entries/en/${word// /%20}" | jq
}

function trackinfo()
{
    artist="$(osascript -e 'tell application "spotify" to artist of current track')"
    album="$(osascript -e 'tell application "spotify" to album of current track')"
    title="$(osascript -e 'tell application "spotify" to name of current track')"
    printf "%s -> %s:%s\n" "${artist}" "${album}" "${title}"
}

function firefox_addons()
{
    local profile_name=${1:-default}
    case "${OSTYPE}" in
        darwin*)
            FIREFOX_HOMEDIR="$HOME/Library/Application Support/Firefox"
            ;;
        linux-gnu)
            FIREFOX_HOMEDIR=~/.mozilla/firefox
            ;;
        *)
            echo Not Found
            ;;
    esac
    local profile_reldir
    profile_reldir=$(test -d "${FIREFOX_HOMEDIR-x}" \
        && awk "/^\[Profile[0-9]\]$/,/^$/ {
            if (/Name=${profile_name}/) {
                flag=1
            } else if (/^$/) {
                flag=0
            } else if (/^Path=.*/) {
                sub(\"^Path=\", \"\", \$0)
                path=\$0
            }
            if (flag) {
                foundpath=path
            }
        }
        END {
            printf foundpath \"\n\"
        }" "${FIREFOX_HOMEDIR}/profiles.ini")
    # shellcheck disable=2015
    local profile_dir="${FIREFOX_HOMEDIR}/${profile_reldir}"
    local workspace_dir
    workspace_dir="$(mktemp -d)"

    local out
    local ext_filename
    local ext_name
    out=""

    for extpath in "${profile_dir}"/extensions/*; do
        ext_filename="$(basename "${extpath}")"
        if [ "${ext_filename}" != staged ]; then
            cp "$profile_dir/extensions/${ext_filename}" "${workspace_dir}"
            unzip -d "${workspace_dir}" "${workspace_dir}/$ext_filename" manifest.json > /dev/null
            ext_name="$(jq '{"name": .name, "author": .author, "app_id": .applications.gecko.id, "homepage_url": .homepage_url}' "${workspace_dir}/manifest.json")"
            local out="${out}{\"${ext_filename}\": ${ext_name}},"
            rm -r "${workspace_dir:?}"/*
        fi
    done
    rmdir "${workspace_dir}"
    out="${out%%,}"
    echo "[${out}]"
}
