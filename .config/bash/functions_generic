#!/usr/bin/env bash

# calculator integrated in command-line
function @()
{
    echo "$@" | bc -l
}

# shellcheck disable=SC2211
function d@()
{
    printf "%.2f\n" "$(echo "$@" | bc -l)"
}

# shortcut for find all files containing pattern in name under current dir
function search()
{
    find . -path '*.git' -prune -o -path '*.idea' -prune -o -iname "*${1}*" -print
}

# repeat command n times
# 'repeat 5 ls -l' will run 'ls -l' 5 times
function repeat()
{
    local count="$1"
    shift
    for _ in $(seq 1 "$count"); do
        "$@"
    done
}

# generate password
# 'passgen 10 [[:alnum:]]' will generate an alphanumeric password of length 10
function passgen()
{
    len=${1:-30}
    domain="${2:-[[:print:]]}"
    grep -ao "${domain}" /dev/urandom \
        | head -n"${len}" \
        | tr -d '\n'
    echo
}

# Stolen from ~meyering
function date()
{
    # shellcheck disable=SC2015
    {
        test $# = 0 \
            && command date +"%a %Y-%m-%d %T %z"
    } \
        || command date "$@"
}

# Invoke sleep with the right number of seconds so that it sleeps
# until the specified date/time, T.  If T is in the past, return 1.
# sleep_until 17:02
# sleep_until 2018  # will sleep until 20:18
# sleep_until now+5min
# sleep_until 24/12/2017
# Stolen from ~meyering
function sleep_until()
{
    local t
    local now
    local delta
    t=$(date -d "$1" +%s)
    now=$(date +%s)
    delta=$((t - now))
    printf "Sleeping for %d seconds\n" "${delta}"
    case "${delta}" in
        -*)
            return 1
            ;;
    esac
    sleep "${delta}"
}

# number of processors available on computer
# Stolen from ~meyering
function num_proc()
{
    local n
    n=$(getconf _NPROCESSORS_ONLN || nproc || echo 0) 2> /dev/null
    test "$n" -gt 0 \
        || n=$(grep -c '^processor[[:space:]]*:' /proc/cpuinfo)
    case $n in
        0)
            n=1
            ;;
    esac
    echo "${n}"
}

# shellcheck disable=SC2034
function color()
{
    local COLOR="${1}"
    local TYPE="${2}"
    local BG=10
    local OFFSET=0
    local NUM=

    local default=39
    local black=30
    local red=31
    local green=32
    local yellow=33
    local blue=34
    local magenta=35
    local cyan=36
    local ltgray=37
    local dkgray=90
    local ltred=91
    local ltgreen=92
    local ltyellow=93
    local ltblue=94
    local ltmagenta=95
    local ltcyan=96
    local white=97

    test -z "${COLOR}" && COLOR=default
    test "${TYPE}" = "bg" && OFFSET="${BG}"
    NUM="${!COLOR}"
    test -z "${NUM}" && return
    ((NUM = NUM + OFFSET))
    # make sure readline keeps track of non-printable chars in all circumstances, to avoid glitchy prompts
    # https://stackoverflow.com/a/19501528
    printf '\001\033[%sm\002' "${NUM}"
}

function pronmode()
{
    unset HISTFILE
}

# https://stackoverflow.com/a/16610385
function log_http_requests()
{
    portno="${1:-80}"
    # 0x48545450 = 'HTTP' 0x2030 = ' 0'
    sudo tcpdump -A -s 0 "tcp port ${portno} and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)" #tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x48545450" #and tcp[(((tcp[12:1] & 0xf0) >> 2) + 8):2] = 0x2030"
}

# Move up n directories
function up()
{
    if [[ $# -gt 1 || $# -lt 0 ]]; then
        echo "Usage: up [int]"
        return 2
    else
        pdirs="${1:-1}"
        shift
        # only works with ZSH https://stackoverflow.com/a/6191382
        #cd $(builtin printf "../"%.0s {1..${pdirs}})
        cd "$(builtin printf "../"%.0s $(seq -s' ' "${pdirs}"))" || return
    fi
}

# Move down n directories towards $OLDPWD.
# if OLDPWD is higher in the hierarchy than pwd, then do nothing
function down()
{
    if [[ $# -gt 1 || $# -lt 0 ]]; then
        echo "Usage: down [int]"
        return 2
    else
        pdirs="${1:-1}"
        shift
        if [ -z "${OLDPWD}" ]; then
            # shellcheck disable=SC2016
            printf 'Cannot go down on $OLDPWD: not set!\n' >&2
            return
        fi
        current_pwd="$(pwd)"
        working="$(sed -E "s#^${current_pwd}/?##;s#^(([^/]*/?){${pdirs}}).*#\1#" <<< "${OLDPWD}")"
        cd "${working#/}" || return
    fi
}

function mkcd()
{
    mkdir -p "${1}" && cd "${1}" || return
}

function hgrep()
{
    if [ $# -gt 1 ]; then
        tail_count="${1}"
        shift
        history "${tail_count}" | grep -- "${@}"
    else
        history | grep -- "${@}"
    fi
}

function cheatsheet()
{
    topic="${*}"
    curl "cheat.sh/${topic// /%20}"
}

function ssh_targets()
{
    tgt="${1:""}"
    shift
    awk 'BEGIN {IGNORECASE=1} /^Host/,/^$/ {
        if ($1 ~ /^Host$/) {
            host=$2
        } else if ($1 ~ /^Hostname$/) {
            hostname=$2
        } else if ($1 ~ /^IdentityFile$/) {
            identityfile=$2
        } else if ($1 ~ /^User$/) {
            user=$2
        }
        if (host != "" && hostname != "" && identityfile != "" && user != "") {
            print host " -> ssh -i " identityfile " " user "@" hostname
            host=""
            identityfile=""
            user=""
            hostname=""
        }
    }' ~/.ssh/config.d/* | sort | grep -E "${tgt}"
}

# Create a data URL from a file
function dataurl()
{
    local mimeType
    mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}
