#!/usr/bin/env bash

# calculator integrated in command-line
function ? () { echo "$@"|bc -l; }

# shortcut for find all files containing pattern in name under current dir
function search () { find . -path '*.git' -prune -o -path '*.idea' -prune -o -iname "*${1}*" -print; }

# if ag binary isn't installed, set it up
if [ -z "$(command -v ag 2>/dev/null)" ]; then
    function ag () {
      if [ $# -eq 1 ]; then
          grep -IRi "$@" --exclude=cscope.* --exclude=.git --exclude=tags --color=auto .
      else
          grep -IRi "$1" --exclude=cscope.* --exclude=.git --exclude=tags --color=auto "$2"
      fi
    }
fi

# repeat command n times
# 'repeat 5 ls -l' will run 'ls -l' 5 times
function repeat ()
{ 
    local count="$1"; shift
    for _ in $(seq 1 "$count");
    do
        eval "$@";
    done
}

# generate password
# 'passgen 10 [[:alnum:]]' will generate an alphanumeric password of length 10
function passgen ()
{
    len=${1:-30}
    domain="${2:-[[:print:]]}"
    # can't do `strings /dev/urandom` because apparently strings on mac os X sucks
    # shellcheck disable=SC2002
    cat /dev/urandom|\
        strings|\
        grep -o "${domain}"|\
        head -n"${len}"|\
        tr -d '\n'
    echo
}

# Stolen from ~meyering
function date ()
{
    # shellcheck disable=SC2015
    { test $# = 0 \
        && command date +"%a %Y-%m-%d %T %z" ; } \
        || command date "$@"
}

# Invoke sleep with the right number of seconds so that it sleeps
# until the specified date/time, T.  If T is in the past, return 1.
# sleep_until 17:02
# sleep_until 2018  # will sleep until 20:18
# sleep_until now+5min
# sleep_until 24/12/2017
# Stolen from ~meyering
function sleep_until ()
{
  local t
  local now
  local delta
  t=$(date -d "$1" +%s)
  now=$(date +%s)
  delta=$((t - now))
  printf "Sleeping for %d seconds\n" "${delta}"
  case "${delta}" in
      -*)
            return 1
            ;;
      esac
  sleep "${delta}"
}

# Stolen from ~meyering
function bell ()
{
    echo -en '\a\a\a'
}

# number of processors available on computer
# Stolen from ~meyering
function num_proc()
{
    local n
    n=$(getconf _NPROCESSORS_ONLN || nproc || echo 0) 2>/dev/null
    test "$n" -gt 0 \
        || n=$(grep -c '^processor[[:space:]]*:' /proc/cpuinfo)
    case $n in
        0)
            n=1 ;;
    esac
    echo $n
}

function color ()
{
    local COLOR="${1}"
    local TYPE="${2}"
    declare -A COLOR_MAP=(
        [default]=39 [black]=30 [red]=31 [green]=32 [yellow]=33
        [blue]=34 [magenta]=35 [cyan]=36 [ltgray]=37 [dkgray]=90
        [ltred]=91 [ltgreen]=92 [ltyellow]=93 [ltblue]=94
        [ltmagenta]=95 [ltcyan]=96 [white]=97
    )
    local BG=10
    local OFFSET=0
    local NUM=
    test -z "${COLOR}" && COLOR=default
    test "${TYPE}" = "bg" && OFFSET="${BG}"
    NUM="${COLOR_MAP[$COLOR]}"
    test -z "${NUM}" && return
    ((NUM = NUM + OFFSET))
    # make sure readline keeps track of non-printable chars in all circumstances, to avoid glitchy prompts
    # https://stackoverflow.com/a/19501528
    printf '\001\033[%sm\002' "${NUM}"
}

function notify ()
{
    for _ in $(seq 1 3); do
        echo -ne '\a';
        sleep .5;
    done
}

function pronmode ()
{
    unset HISTFILE
}

# https://stackoverflow.com/a/16610385
function log_http_requests ()
{
    portno="${1:-80}"
    # 0x48545450 = 'HTTP' 0x2030 = ' 0'
    sudo tcpdump -A -s 0 "tcp port ${portno} and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)" #tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x48545450" #and tcp[(((tcp[12:1] & 0xf0) >> 2) + 8):2] = 0x2030"
}

# Move up n directories
function up ()
{
    if [[ $# -gt 1 || $# -lt 0 ]]; then
        echo "Usage: up [int]"
        return 2
    else
        pdirs="${1:-1}"; shift
        # only works with ZSH https://stackoverflow.com/a/6191382
        #cd $(builtin printf "../"%.0s {1..${pdirs}})
        cd "$(builtin printf "../"%.0s $(seq -s' ' "${pdirs}"))" || return
    fi
}

# Move down n directories towards $OLDPWD.
# if OLDPWD is higher in the hierarchy than pwd, then do nothing
function down ()
{
    if [[ $# -gt 1 || $# -lt 0 ]]; then
        echo "Usage: down [int]"
        return 2
    else
        pdirs="${1:-1}"; shift
        if [ -z "${OLDPWD}" ]; then
            # shellcheck disable=SC2016
            printf 'Cannot go down on $OLDPWD: not set!\n' >&2
            return
        fi
        local current_pwd
        current_pwd="$(pwd)"
        working="$(sed -E "s/^${current_pwd//\//\\/}//;s/^(\/[^\/]*){${pdirs}}.*/\1/" <<< "${OLDPWD}")"
        cd "${working#/}" || return
    fi
}

function mkcd () {
    mkdir -p "${1}" && cd "${1}" || return
}

# Shorthand clone from github
function hclone () {
    local url
    if [[ "$1" == "-p" ]]; then
        url="git@github.com:${2}.git"
        shift
    else
        url="git://github.com/${1}.git"
    fi
    git clone "$url"
}

function cheatsheet ()
{
    topic="${@}"
    curl "cheat.sh/${topic}"
}

function weather ()
{
    location="${@}"
    curl "v2.wttr.in/${location}"
}
