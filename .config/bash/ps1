#!/usr/bin/env bash

PROMPT_DIRTRIM=3

if [[ ${EUID} == 0 ]]; then
    # red
    sq_color="\001\033[0;31m\002"
else
    # light blue
    sq_color="\001\033[0;36m\002"
fi
reset_color="\001\033[01;39m\002"
remove_bold="\001\033[0m\002"
angle_se='\342\224\214'
angle_ne='\342\224\224'
line_h='\342\224\200'
error_symbol='\342\234\227'
preamble_line1="${sq_color}${angle_se}${line_h}"
info_line1="[${reset_color}\t${sq_color}]${line_h}[${reset_color}\u@\H${sq_color}]"
preamble_line2="${angle_ne}${line_h}${line_h}> ${reset_color}"
info_line2="\w\$(grb_git_prompt)"
closing_line2=" ${sq_color}\\$ ${reset_color}>>${remove_bold} "

function format_pipestatus()
{
    # save PIPESTATUS very first thing https://unix.stackexchange.com/a/163660
    _pipestatus=("${PIPESTATUS[@]}")
    status_str=""
    reset_color="\001\033[01;39m\002"
    success_symbol='\342\234\223'
    error_symbol='\342\234\227'
    line_h='\342\224\200'
    if [[ ${EUID} == 0 ]]; then
        # red
        sq_color="\001\033[0;31m\002"
    else
        # light blue
        sq_color="\001\033[0;36m\002"
    fi
    display=0
    for val in "${_pipestatus[@]}"; do
        if [[ ${val} == 0 ]]; then
            status_str="${status_str}[${reset_color}${success_symbol}${sq_color}]${line_h}"
        else
            status_str="${status_str}[${reset_color}${error_symbol}${sq_color}]${line_h}"
            display=1
        fi
    done
    if [[ ${display} -ne 0 ]]; then
        printf "%b" "${status_str}"
    fi
}

PS1="${preamble_line1}\$(format_pipestatus )${info_line1}\n${preamble_line2}${info_line2}${closing_line2}"
unset sq_color
unset reset_color
unset remove_bold
unset angle_se
unset angle_ne
unset line_h
unset error_symbol
unset success_symbol
unset preamble_line1
unset info_line1
unset preamble_line2
unset info_line2
unset closing_line2

## If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm* | mterm* | rxvt*)
        PS1="\[\e]0;${debian_chroot:+(${debian_chroot:-""})}\u@\h: \w\a\]$PS1"
        ;;
    *) ;;

esac

# for failed commands, show exit code and signal if killed by one
# Stolen from ~meyering
function prompt_show_status()
{
    # Don't use `status'. It's read-only in zsh.
    local stat="$?"

    if test $stat -ne 0 -a $stat != 128; then
        # If process exited by a signal, determine name of signal.
        if test $stat -gt 128; then
            local signal
            signal="$(builtin kill -l "$(("${stat}" - 128))" 2> /dev/null)"
            test "${signal}" && signal=" (${signal})"
        fi
        echo "[Exit ${stat}${signal}]" 1>&2
    fi
    test "${BASH}" && history -a
    return 0
}

#PROMPT_COMMAND="prompt_show_status;$PROMPT_COMMAND"
[[ ! ${PROMPT_COMMAND} =~ "prompt_show_status;" ]] && PROMPT_COMMAND="prompt_show_status;$PROMPT_COMMAND"
