#!/bin/bash

PROMPT_DIRTRIM=3

function format_pipestatus ()
{
    exes="["
    for val in "${PIPESTATUS[@]}"; do
        echo "[\[\033[01;37m\]\342\234\227$sq_color]$line_h"
    done
}

if [[ ${EUID} == 0 ]]; then
	# red
	sq_color="\[\033[0;31m\]"
else
	# light blue
	sq_color="\[\033[0;36m\]"
fi
reset_color="\[\033[01;37m\]"
remove_bold="\\[\\033[0m\\]"
line_h='\342\224\200'
angle_se='\342\224\214'
angle_ne='\342\224\224'
error_symbol='\342\234\227'

PS1="$sq_color$angle_se$line_h\$([[ \$? != 0 ]] && echo \"[\[\033[01;37m\]$error_symbol$sq_color]$line_h\")[$reset_color\A$sq_color]$line_h[$reset_color\u@\h$sq_color]\n$angle_ne$line_h$line_h> $reset_color\w\$(_dotfiles_scm_info \(%s\))$sq_color \\$ $reset_color>>$remove_bold "
unset sq_color
unset reset_color
unset remove_bold
unset angle_se
unset angle_ne
unset line_h

## If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|mterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# for failed commands, show exit code and signal if killed by one
# Stolen from ~meyering
function prompt_show_status ()
{
    # Don't use `status'. It's read-only in zsh.
    local stat="$?"

    if test $stat -ne 0 -a $stat != 128; then
        # If process exited by a signal, determine name of signal.
        if test $stat -gt 128; then
            local signal="$(builtin kill -l $[$stat - 128] 2>/dev/null)"
            test "$signal" && signal=" ($signal)"
        fi
        echo "[Exit $stat$signal]" 1>&2
    fi
    test "$BASH" && history -a
    return 0
}

PROMPT_COMMAND="prompt_show_status;$PROMPT_COMMAND"
