#!/usr/bin/env bash

# shellcheck disable=SC2154
alias deploy_server='cp -v ${jobox}/Kili/build/libs/Kili.war /opt/tomcat9/webapps/'
DBDIR="$HOME/data/kilidb"

CREDS_FILE="${XDG_DATA_DIR:-$HOME/.local/share}/bash/creds"
test -f "${CREDS_FILE}" && source "${CREDS_FILE}"
export VAULT_ADDR=https://vault.cloud.jobox.ai

function start_tomcat()
{
    tomcat_pid=$(pgrep -f tomcat)
    if [ -n "${tomcat_pid}" ]; then
        echo "Found running tomcat server pid ${tomcat_pid}; killing now"
        kill "${tomcat_pid}"
        sleep 2
        pgrep -f tomcat && echo "failed to kill tomcat server" && exit 1
    fi
    /opt/tomcat9/bin/startup.sh
}

function kili_json()
{
    sed -E "s/(20[0-9]{2}-[0-9]{2}-[0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2}\.[0-9]{1,3})/\1 \2-\3-\4/g;s/=/:/g;s/[a-zA-Z0-9\. _]+\{/\{/g;s/([a-zA-Z0-9_\.-][a-zA-Z0-9_\. -]*)/\"\0\"/g;s/'\"/\"/g;s/\"'/\"/g;s/\}\{/},{/g;s/'(\s*)'/\"\1\"/g;s/(20[0-9]{2}-[0-9]{2}-[0-9]{2}) ([0-9]{2})-([0-9]{2})-([0-9]{2}\.[0-9]{1,3})/\1 \2:\3:\4/g" | jq
}

function twlookup()
{
    phone_number="$1"
    shift
    curl -sX GET "https://lookups.twilio.com/v1/PhoneNumbers/${phone_number}?CountryCode=US&Type=carrier&Type=caller-name" \
        -u "${TWILIO_TOKEN}" | jq
}

function twlookup_whitepages()
{
    phone_number="$1"
    shift
    curl -sX GET "https://lookups.twilio.com/v1/PhoneNumbers/${phone_number}?AddOns=whitepages_pro_caller_id" \
        -u "${TWILIO_TOKEN}" | jq
}

function stop_db()
{
    pg_ctl -D "${DBDIR}/postgres" stop
}

function start_db()
{
    PGDATA="${DBDIR}/postgres" pg_ctl -l "${DBDIR}/logfile" start
}

function replicate_db()
{
    service="${1}"; shift
    oldpwd=$(pwd)
    export_file_name="$(date "dbexport_${service}_%Y_%m_%d.pgsql")"
    pg_dump service="${service}" >| ~/"${export_file_name}"
    mkdir -p "${DBDIR}/postgres"
    stop_db
    cd || return
    rm -r "${DBDIR}/postgres"
    mkdir -p "${DBDIR}/postgres"
    cd "${DBDIR}" || return
    pg_ctl -D ./postgres initdb
    start_db
    sleep 2
    createuser jobox_staging
    createdb jobox_staging
    psql service=local < ~/${export_file_name}
    cd "${oldpwd}" || return
}

function replicate_int_db()
{
    replicate_db integration
}

function replicate_stag_db()
{
    replicate_db staging
}

# need to find a solution here:
# - replicating from read-replica will abort partway through due to replication
#   interfering with db dump
# - actual read-write prod db is protected by AWS security groups that prevent
#   all connections except from specific IP addresses (kili, redshift, that kind
#   of stuff)
function replicate_prod_db()
{
    replicate_db prod-rw
}

function intercom_lookup()
{
    uid="${*}"
    curl -s -H "Authorization:Bearer ${INTERCOM_TOKEN}" -H 'Accept: application/json' -H 'Content-Type: application/json' "https://api.intercom.io/users?user_id=${uid}" | jq '.'
}

function android_api()
{
    # shellcheck disable=SC2154
    vim "${jobox}/unicron/app/src/main/java/us/jobox/app/network/JoboxApi.kt"
}

function ios_api()
{
    vim "${jobox}/Himalaya/Jobox/JoboxAPI.swift"
}

# shellcheck disable=SC2139
alias testcurl="curl -sH 'User-Id: 68' -H 'Password: ${KILI_PW}' -H 'Authorization: ${KILI_STAG_AUTH}' -H 'Timestamp: ${KILI_STAG_TIMESTAMP}' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Accept-Encoding = gzip;q=1.0, compress;q=0.5'"
# shellcheck disable=SC2139
alias prodcurl="curl -sH 'User-Id: 68' -H 'Password: ${KILI_PW}' -H 'Authorization: ${KILI_PROD_AUTH}' -H 'Timestamp: ${KILI_PROD_TIMESTAMP}' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Accept-Encoding = gzip;q=1.0, compress;q=0.5'"

function stripe_charge()
{
    charge_id="${1}"
    shift
    curl -su "${STRIPE_TOKEN}" "https://api.stripe.com/v1/charges/${charge_id}"
}

function backfill_tls()
{
    uid="$1"
    shift
    prodcurl "https://api.jobox.ai/Kili/admin/backfill/transactions?uid=${uid}"
}

function local_backfill_tls()
{
    uid="${1}"
    shift
    psql service=local -c "DELETE FROM transaction_log WHERE user_id = ${uid}" && prodcurl "http://localhost:8080/Kili/admin/backfill/transactions?uid=${uid}"
}

function show_job()
{
    jid="${1}"
    shift
    prodcurl "https://api.jobox.ai/Kili/admin/jobs/${jid}" | jq '.'
}

function murder_java()
{
    jps | grep -E 'Boostrap' | cut -d' ' -f1 | xargs -r kill
}

function redis_staging()
{
    ssh -t tools01.ops "sudo stunnel /opt/stunnel_configs/redis_staging.conf; REDISCLI_AUTH=${REDIS_AUTH_STAGING} redis-cli -c -h localhost -p 6379; sudo pkill stunnel; unset HISTFILE"
}

function redis_prod()
{
    ssh -t tools01.ops "sudo stunnel /opt/stunnel_configs/redis_prod.conf; REDISCLI_AUTH=${REDIS_PROD_AUTH} redis-cli -c -h localhost -p 6379; sudo pkill stunnel; unset HISTFILE"
}

function decruft_joblogs()
{
    jq -c '.[]|{sender: .sender_id, receiver: .receiver_id, status: .status}'
}

function joblogs_noupdate()
{
    jq -c 'select(.status != "UPDATE")'
}

function get_jobid()
{
    echo $((36#$1))
}

alias reset_db='stop_db && rm -r "${DBDIR}" && cp -R "${DBDIR}.bak" "${DBDIR}" && start_db'
alias backup_localdb='stop_db && rm -rf "${DBDIR}.bak" && cp -R "${DBDIR}" "${DBDIR}.bak" && start_db'
alias mipemode="cd mipe && venv && cd -"
alias testnpush="gradle clean build && git push"
alias jobox-format-check="java-format-check -t 30"
alias jobox-format="java-format-check -a format -t 30"

complete -C '/opt/local/bin/aws_completer' aws
