#!/bin/bash

alias deploy_server="cp -v ${jobox}/Kili/build/libs/Kili.war /opt/tomcat9/webapps/"

function start_tomcat ()
{
    tomcat_pid=$(pgrep -f tomcat)
    if [ ! -z "${tomcat_pid}" ]; then
        echo "Found running tomcat server pid ${tomcat_pid}; killing now"
        kill "${tomcat_pid}"
        sleep 2
        pgrep -f tomcat && echo "failed to kill tomcat server" && exit 1
    fi
    /opt/tomcat9/bin/startup.sh
}

function kili_json ()
{
        sed -E "s/(20[0-9]{2}-[0-9]{2}-[0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2}\.[0-9]{1,3})/\1 \2-\3-\4/g;s/=/:/g;s/[a-zA-Z0-9\. _]+\{/\{/g;s/([a-zA-Z0-9_\.-][a-zA-Z0-9_\. -]*)/\"\0\"/g;s/'\"/\"/g;s/\"'/\"/g;s/\}\{/},{/g;s/'(\s*)'/\"\1\"/g;s/(20[0-9]{2}-[0-9]{2}-[0-9]{2}) ([0-9]{2})-([0-9]{2})-([0-9]{2}\.[0-9]{1,3})/\1 \2:\3:\4/g" | jq
}

function twlookup ()
{
    phone_number="$1"; shift
    curl -sX GET "https://lookups.twilio.com/v1/PhoneNumbers/${phone_number}?CountryCode=US&Type=carrier&Type=caller-name" \
       -u 'TWILIO_KEY_HERE'|jq
}

function troll_hong ()
{
    while true; do curl -s -X POST -H 'Content-Type: application/json' --data '{"text": "hi"}' https://hooks.slack.com/services/FOO/BAR/BAZ; sleep 30; done
}

function stop_db ()
{
    PGDATA=~/Documents/db/postgres pg_ctl stop
}

function start_db ()
{
    pg_ctl -D ~/Documents/db/postgres -l ~/Documents/db/logfile start
}

function replicate_db ()
{
    oldpwd=$(pwd)
    stop_db
    cd
    rm -r ~/Documents/db/postgres
    mkdir -p ~/Documents/db/postgres; cd ~/Documents/db
    pg_ctl -D ./postgres initdb
    pg_dump -h haha.nope.com -U jobox_staging > ~/dbexport.pgsql
    start_db
    sleep 2
    createuser jobox_staging
    createdb jobox_staging
    psql -h localhost -U jobox_staging < ~/dbexport.pgsql
    cd "${oldpwd}"
}

function replicate_prod_db ()
{
    oldpwd=$(pwd)
    stop_db
    cd
    rm -r ~/Documents/db/postgres
    mkdir -p ~/Documents/db/postgres
    cd ~/Documents/db
    pg_ctl -D ./postgres initdb
    pg_dump -h haha.nope.com > ~/dbexport.pgsql
    start_db
    sleep 2
    createuser jobox_staging
    createdb jobox_staging
    psql -h localhost -U jobox_staging < ~/dbexport.pgsql
    cd "${oldpwd}"
}

function intercom_lookup ()
{
    uid="${@}"
    curl -s -H 'Authorization:Bearer INTERCOM_TOKEN' -H 'Accept: application/json' -H 'Content-Type: application/json' "https://api.intercom.io/users?user_id=${uid}" | jq '.'
}

function android_api ()
{
    vim $jobox/unicron/app/src/main/java/us/jobox/app/network/JoboxApi.kt
}

function ios_api ()
{
    vim $jobox/Himalaya/Jobox/JoboxAPI.swift
}

alias testcurl="curl -sH 'User-Id: 1' -H 'Authorization: 000000000' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Accept-Encoding = gzip;q=1.0, compress;q=0.5'"
alias prodcurl="curl -sH 'User-Id: 1' -H 'Authorization: 000000000' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Accept-Encoding = gzip;q=1.0, compress;q=0.5'"

function stripe_charge ()
{
    charge_id="${1}"; shift
    curl -su 'STRIPE_KEY_HERE:' "https://api.stripe.com/v1/charges/${charge_id}"
}

function backfill_tls ()
{
    uid="$1"; shift
    prodcurl "https://api.jobox.ai/Kili/admin/backfill/transactions?uid=${uid}"
}

function show_job ()
{
    jid="${1}"; shift
    prodcurl "https://api.jobox.ai/Kili/v2/jobs/${jid}"|jq '.'
}
