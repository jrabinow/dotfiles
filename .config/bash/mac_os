#!/usr/bin/env bash

if [ "$(type -t ls)" != "alias" ]; then
    alias ls="ls -G"
fi
alias utop='top -U $USER'
alias updatedb="sudo bash -c 'cd / && /opt/local/bin/slocate -u -c /opt/local/etc/updatedb.conf'"
alias locate=slocate
alias codesign_debugger="sudo codesign --force --deep --preserve-metadata=identifier,entitlements,requirements,flags,team-identifier --sign gdb_codesign"
alias manup="sudo makewhatis /opt/local/share/man; sudo chmod a+r /opt/local/share/man/mandoc.db"

export COCOAPODS_DISABLE_STATS='true'
#export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk17/Contents/Home
#alias simulator="/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app/Contents/MacOS/Simulator -CurrentDeviceUDID AE350978-A3A3-44E5-A77F-45028962E4E7"
function free()
{
    vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
}

# shellcheck disable=SC2142
alias batt_stats="pmset -g batt | awk '/InternalBattery/ {sub(\"%;\", \"\", \$3); print \$3}'"

function allow_macports()
{
    portfile="${1:-}"
    # shellcheck disable=SC2154
    find "${macports}" -type l -name work -delete
    # shellcheck disable=SC2154
    grantdir="${macports}/.."
    while [ "$(realpath "${grantdir}")" != "${HOME}" ]; do
        /bin/chmod +a "macports allow read,execute" "${grantdir}"
        grantdir="${grantdir}/.."
    done
    sudo /bin/chmod -R +a "macports allow read,execute" "${macports}/${portfile}"
}

# configd starts using 100% CPU for no discernable reason. It's crap so it just
# retries whatever it's doing in an infinite loop and sticks around, making the
# whole laptop unsuable. I don't want that kinda software running on my computer.
#
# The problem comes from configd being auto-restarted by launchd if the process
# dies. I've tried to find out why and to deactivate the restarts. So far no
# luck. One day i'll go and properly investigate with dtruss/dtrace.
# This thing here will ensure that configd goes down and stays down. Screw that
# thing.
function configd_killer()
{
    lastkill_iter=10
    while [ "${lastkill_iter}" -gt 0 ]; do
        configd_tgt_pid="$(ps aux | awk '/configd/ {if ($3 >= 20.0) print $2}')"
        if [ "${configd_tgt_pid}" != "" ]; then
            sudo kill -9 "${configd_tgt_pid}"
            lastkill_iter=10
            sleep 1
        else
            lastkill_iter=$((lastkill_iter - 1))
            sleep 5
        fi
        echo "${lastkill_iter}"
    done
    echo "configd has understood who's boss"
}

# Load NVM from MacPorts.
# NVM initialization is too slow to want it on every shell startup, so stick it
# inside a function that can be called manually when we want NVM.
# This function only loads from the MacPorts location, but I'll expand it if I start using
# NVM from other installation methods, so use the generic name "nvmload".
function nvmload()
{
    # shellcheck disable=SC1091
    if ! command -v nvm > /dev/null; then
        test -r /opt/local/share/nvm/nvm.sh && source /opt/local/share/nvm/nvm.sh
    else
        echo 'nvm not found!' >&2
    fi
}
